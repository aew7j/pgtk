#! /usr/bin/env python

#%% Import libraries

import glob
import os
import subprocess
import re
import pandas as pd
import xml.etree.ElementTree as ET
import requests
import sqlite3
import fire

#%% Definitions

rdf_dir = './cache/epub'
rdf_path = rdf_dir + '/{0}/pg{0}.rdf'

db_dir = './'
db_name = db_dir + '/gutenberg.db'

pg_rdf_url = "https://www.gutenberg.org/cache/epub/feeds/rdf-files.tar.zip"
pg_index_url = "https://www.gutenberg.org/dirs/GUTINDEX.zip"
gut_url = 'https://www.gutenberg.org/ebooks/{}'
gut_txt = 'https://www.gutenberg.org/ebooks/{}.txt'
gut_utf8 = 'https://www.gutenberg.org/ebooks/{}.txt.utf-8'

ns = dict(base="http://www.gutenberg.org/",
    rdfs="http://www.w3.org/2000/01/rdf-schema#",
    rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    marcrel="http://id.loc.gov/vocabulary/relators/",
    pgterms="http://www.gutenberg.org/2009/pgterms/",
    cc="http://web.resource.org/cc/",
    dcam="http://purl.org/dc/dcam/",
    dcterms="http://purl.org/dc/terms/")

xpaths = dict(
    subjects = ".//dcterms:subject/rdf:Description/rdf:value",
    bookshelves = ".//pgterms:bookshelf/rdf:Description/rdf:value",
    languages = ".//dcterms:language/rdf:Description/rdf:value",
    agents = ".//marcrel:ill/pgterms:agent/pgterms:name",
    rights = ".//dcterms:rights",
    title = ".//dcterms:title",
    types = ".//dcterms:type/rdf:Description/rdf:value",
    creators = ".//dcterms:creator/pgterms:agent/pgterms:name",
    formats = ".//dcterms:hasFormat/pgterms:file/dcterms:format/rdf:Description/rdf:value"
)

cat_fields = dict(
    ag = 'agents',
    bo = 'bookshelves',
    cr = 'creators',
    fo = 'formats',
    la = 'languages',
    ri = 'rights',
    su = 'subjects',
    ti = 'title',
    ty = 'types'
)

default_formats = ["text/plain; charset={}".format(cs) 
                   for cs in ['utf-8', 'ascii', 'iso-8859-1']] + ['text/plain']
default_formats_str = '^\s*' + '|'.join(default_formats) + '\s*'
default_formats_rgx =  re.compile(default_formats_str)

#%% Core Functions

def get_gids():
    gids = [path.split('/')[-1]
        for path in glob.glob(rdf_dir + '/*')]
    gids = [int(gid) for gid in gids
        if not re.search(r'[^0-9]+', gid)]
    gids = sorted(gids)
    return gids

def get_rdf(gid):
    path = rdf_path.format(gid)
    rdf = open(path, 'r', encoding='utf8').read()
    return rdf

def get_text_content(gid, url_template=gut_utf8):
    gut_url = url_template.format(gid)
    r = requests.get(gut_url)
    # May want to test if file is valid, i.e. check  for:
    # <div class="header">
    #     <h1>Page Not Found</h1>
    # </div>
    return r.text

def get_metadata_items(el, xpath, ns=ns):
    items = [item.text for item in el.findall(xpath, namespaces=ns)]
    return items

def get_rdf_root(gid):
    rdf = get_rdf(gid)
    root = ET.fromstring(rdf)
    return root 

def get_metadata(gid):
    root = get_rdf_root(gid)
    md = {item:get_metadata_items(root, xpaths[item]) for item in xpaths}
    return md

def get_catalog(gids):
    data = []
    for gid in gids:
        md = get_metadata(gid)
        for key in md.keys():
            if key == 'formats':
                vals = sorted(md[key])
            else:
                vals = md[key]
            for val in vals:
                val = val.upper()
                data.append((gid, key, val))
    df = pd.DataFrame(data, columns=['gid','key','val'])
    return df

def get_catalog_wide(df):
    print(df.head())
    df_wide = df.groupby(['gid', 'key']).val.apply(lambda x: '\n'.join(x))\
        .unstack().fillna('NONE GIVEN')
    return df_wide

def get_reduced_wide(df, cols=['title', 'creators', 'formats', 'languages', 'types']):
    return df[cols]

def get_catalog_text(df_wide):
    df_wide = df_wide.loc[df_wide.languages == 'en']
    df_wide = df_wide.loc[df_wide.types == 'Text']
    df_wide = df_wide.loc[df_wide.rights.str.match('Public')]
    txtidx = df_wide.formats.str.contains(default_formats_rgx).fillna(False)
    df_text = df_wide.loc[txtidx, ['title', 'creators', 'subjects']]
    df_text.subjects = df_text.subjects.fillna('None given')
    df_text.creators = df_text.creators.fillna('None given')
    return df_text
    
def save_catalog_to_db(catalog, tname='catalog'):
    with sqlite3.connect(db_name) as db:
        catalog.to_sql(tname, db, index=True, if_exists='replace')

def get_catalog_from_db():
    with sqlite3.connect(db_name) as db:
        catalog = pd.read_sql('select * from catalog', db, index_col='gid')
        return catalog
    
def get_gids_for_pat_from_db(catalog, name_pat, key='creators'):
    sql  = "SELECT gid FROM catalog WHERE creators LIKE ?"
    with sqlite3.connect(db_name) as db:
        df = pd.read_sql(sql, db, params=(name_pat,))
        return df.gid.tolist()

#%% Commands

def download_cache(overwrite=True):
    """Download RDF catalog from Project Gutenburg"""
    if overwrite == False or not os.path.exists('./cache/epub'):
        print("Downloading RDF cache")
        rdf_zip = pg_rdf_url.split('/')[-1]
        rdf_tar =  rdf_zip.replace('.zip', '')
        subprocess.call(['wget', pg_rdf_url])
        subprocess.call(['unzip', rdf_zip])
        subprocess.call(['tar', '-xf', rdf_tar])
        subprocess.call(['rm', rdf_zip])
        subprocess.call(['rm', rdf_tar])
    else:
        print("RDF files exist on system. Set overwrite = True to overwrite.")

def populate_database(replace=True):
    """Create db with downloaded RDF data"""
    print("Creating database from RDF cache")
    if  os.path.exists('./cache/epub'):
        gids = get_gids()
        cat = get_catalog(gids)
        # save_catalog_to_db(cat)
        cat_wide = get_catalog_wide(cat)
        save_catalog_to_db(cat_wide)
    else:
        print("No RDF cache. Run download-cache first.")

def remove_cache():
    """Remove RDF cache from file system"""
    print("Removing RDF cache")
    subprocess.call(['rm', '-rf', './cache'])

def show_fields():
    cat = get_catalog_from_db()
    list = '\n'.join([r"{}{} {}".format(col[0], col[1], col)  for col in cat.columns.tolist()])
    print(list)

def print_results(results, mode='long'):
    for i, idx in enumerate(results.index):
        item = results.loc[idx]
        if mode == 'long':
            print()
            print('NO:', i+1)
            print('ID:', item.gid)
            print('AU:', item.creators)
            print('TI:', item.title)
            # print('FT:', item.formats.replace('\n', '\nFT: '))
            print('DL:', gut_utf8.format(item.gid))
            print('DL:', gut_url.format(item.gid))
            print('SU:', item.subjects.replace('\n', '\nSU: '))
        elif mode == 'short':
            print(i+1, item.gid, item.creators.replace('\n', ', '),
                  item.title.replace('\n', ', '), gut_utf8.format(item.gid), sep='|')
        else:
            print("No mode selected.")

# def search_field(pat, field='creators', type='Text', limit=20):
#     """Search catalog by single field"""
#     cat = get_catalog_from_db()
#     results = cat.loc[cat[field].str.contains(pat, case=False), ['title','creators','subjects']].head(limit)
#     print_results(results, mode='short')

def run_query(where_clause, limit=1000, mode='short'):
    """Run a query to the catalog table in the database. Don't use a LIMIT clause; instead pass argument."""
    sql = "SELECT * FROM catalog WHERE {} ORDER BY creators, title LIMIT {}".format(where_clause, limit)
    with sqlite3.connect(db_name) as db:
        results = pd.read_sql_query(sql, db)
        print_results(results, mode=mode)

def search_fields(ti='', cr='', su='',  la='EN', ty='TEXT'):
    """Search catalog by fields -- title (ti), creators (cr), and subjects (su)."""
    args = locals()
    where_clause_list = []
    params = []
    for f in args:
        if args[f] != '':
            where_clause_list.append("{} LIKE ? ".format(cat_fields[f]))            
            if str(type(args[f])) == "<class 'tuple'>":
                args[f] = ', '.join(args[f])
            if f == 'ti' or f == 'su' or f == 'cr':
                args[f] = "%{}%".format(args[f].upper())
            params.append(args[f])
    where_clause = '\nAND '.join(where_clause_list)
    sql = """
    SELECT * FROM catalog
    WHERE {}
    ORDER BY creators, title
    LIMIT 100
    """.format(where_clause)
    with sqlite3.connect(db_name) as db:
        results = pd.read_sql_query(sql, db, params=params)
        print_results(results, mode='short')

def search_author(pat, limit=1000, mode='short'):
    """Search for an author by substring"""
    pat = ', '.join(pat)
    where_clause = """creators like '%{}%' and languages like 'EN' 
    and types = 'TEXT' and formats like '%TEXT/PLAIN%'""".format(pat.upper())
    run_query(where_clause, limit=limit, mode=mode)

#%% Run
if __name__ == '__main__':
    
    commands = {
        'download-cache': download_cache, 'dc': download_cache,
        'populate-database': populate_database, 'pd': populate_database,
        'remove-cache': remove_cache, 'rc': remove_cache,
        'list-fields': show_fields, 'lf': show_fields,
        # 'search-pattern': search_pattern, 'sp': search_pattern,
        'run-query': run_query, 'rq': run_query,
        'search-author': search_author, 'sa': search_author,
        'search-fields': search_fields, 'sf': search_fields
    }
    fire.Fire(commands)